Resources:
  #VPC section
  TestVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: TestVPC
  #Internet Gateway section
  TestInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: TestInternetGateway
    DependsOn: TestVPC
  TestInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: 
        Ref: TestInternetGateway
      VpcId: 
        Ref: TestVPC
    DependsOn: TestInternetGateway
  #Subnet section
  TestPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 192.168.1.0/24
      VpcId: 
        Ref: TestVPC
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: TestPublicSubnet
    DependsOn: TestVPC
  TestPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 192.168.2.0/24
      VpcId: 
        Ref: TestVPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: TestPrivateSubnet
    DependsOn: TestVPC
  TestPublicSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId:
        Ref: TestPublicRouteTable
      SubnetId:
        Ref: TestPublicSubnet
  TestPrivateSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId:
        Ref: TestPrivateRouteTable
      SubnetId:
        Ref: TestPrivateSubnet
  #Route section
  TestPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: 
        Ref: TestVPC
      Tags:
        - Key: Name
          Value: TestPublicRouteTable
    DependsOn: TestVPC
  TestPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: 
        Ref: TestVPC
      Tags:
        - Key: Name
          Value: TestPrivateRouteTable
    DependsOn: TestVPC
  TestPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: 
        Ref: TestPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Ref: TestInternetGateway
    DependsOn: TestNATGateway
  TestPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: 
        Ref: TestPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: 
        Ref: TestNATGateway
    DependsOn: TestNATGateway
  #NAT Gateway section
  TestNATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: 
        "Fn::GetAtt" : ["TestEIP", "AllocationId"]
      SubnetId:
        Ref: TestPublicSubnet
      Tags:
        - Key: Name
          Value: TestNATGateway
    DependsOn: TestEIP
  TestEIP:
    Type: 'AWS::EC2::EIP'
    Properties: {}
    DependsOn: TestVPC
  #Test Security Group Section
  TestSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: test-security-group
      GroupDescription: "purposful open security group for VSS testing"
      SecurityGroupIngress:
        -  
          CidrIp: '10.0.0.0/8'
          FromPort: '22'
          IpProtocol: 'tcp'
          ToPort: '22'
      VpcId: !Ref TestVPC
  TestEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-082b5a644766e0e6f #Amazon Linux 2 AMI (HVM)
      InstanceType: t2.micro
      NetworkInterfaces:
        -
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !GetAtt TestSecurityGroup.GroupId
          SubnetId: !Ref TestPublicSubnet
    DependsOn: TestPublicSubnet
Outputs:
  InstanceId:
    Value: !Ref TestEC2Instance